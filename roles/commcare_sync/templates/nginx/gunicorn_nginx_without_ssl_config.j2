map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}

upstream {{ app_name }} {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:{{ run_dir }}/gunicorn.sock fail_timeout=0;
}

server {
  # Serve content
  listen 80 default_server;
  listen [::]:80 default_server;

  client_max_body_size 4G;

  access_log {{ nginx_access_log_file }};
  error_log {{ nginx_error_log_file }};

  location /static/ {
    alias {{ static_dir }}/;
  }

  location /media/ {
    alias {{ media_dir }}/;
  }

  location /shiny-server/ {
    # Source: https://support.rstudio.com/hc/en-us/articles/213733868-Running-Shiny-Server-with-a-Proxy
    proxy_pass http://127.0.0.1:3838/;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_read_timeout 20d;
    proxy_buffering off;
  }

  location / {
    if (-f {{ html_dir }}/maintenance_on.html) {
      return 503;
    }

    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_read_timeout {{ gunicorn_timeout_seconds }}s;
    proxy_redirect off;

    # Try to serve static files from nginx, no point in making an
    # *application* server like Unicorn/Rainbows! serve static files.
    if (!-f $request_filename) {
      proxy_pass http://{{ app_name }};
      break;
    }
  }

  error_page 503 /maintenance_on.html;
  location = /maintenance_on.html {
    root {{ html_dir }}/;
  }
}
